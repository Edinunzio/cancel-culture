use super::Report;
use serde::Serialize;
use std::fmt::{Display, Error, Formatter};
use std::result::Result;

static TEMPLATE: &str = "## Deleted tweets for {screen_name}

The list below includes {deleted_count} deleted tweets by
[{screen_name}](https://twitter.com/{screen_name}).

{{if undeleted_count}}There are also {undeleted_count} tweets that are indicated as not currently
deleted by the Twitter API that have been scraped from pages of deleted tweets (as replies, etc.).
These possibly undeleted tweets are included for context and are indicated by a _(live)_ link.
{{else}}{{endif}}

This report was generated by ✨[cancel-culture](https://github.com/travisbrown/cancel-culture)✨,
an open source project by [Travis Brown](https://twitter.com/travisbrown).

You can create your own updated version of this document by checking out and configuring the
repository and then running the following commands:

```bash
$ cargo build --release
$ target/release/twcc deleted-tweets --report {screen_name}

Please note that all tweets quoted here are sourced from the
[Wayback Machine](https://web.archive.org) and were not directly accessed through the Twitter API or
any Twitter client.
";

#[derive(Serialize)]
pub struct DeletedTweetReport<'a> {
    screen_name: &'a str,
    deleted_count: usize,
    undeleted_count: usize,
}

impl<'a> DeletedTweetReport<'a> {
    pub fn new(
        screen_name: &'a str,
        deleted_count: usize,
        undeleted_count: usize,
    ) -> DeletedTweetReport<'a> {
        DeletedTweetReport {
            screen_name,
            deleted_count,
            undeleted_count,
        }
    }
}

impl<'a> Report for DeletedTweetReport<'a> {
    fn title() -> &'static str {
        "Deleted Tweet report"
    }
    fn template() -> &'static str {
        TEMPLATE
    }
}

impl<'a> Display for DeletedTweetReport<'a> {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        write!(f, "{}", self.render())
    }
}
